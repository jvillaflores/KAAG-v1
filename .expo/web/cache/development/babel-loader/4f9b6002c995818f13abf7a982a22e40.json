{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_ALL_POSTS_STATE_CHANGE } from \"../constants/index\";\nimport firebase from \"firebase\";\n\nrequire(\"firebase/firestore\");\n\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log(\"does not exist\");\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      console.log(posts);\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchAllUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"postsAll\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var postsAll = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      console.log(postsAll);\n      dispatch({\n        type: USER_ALL_POSTS_STATE_CHANGE,\n        postsAll: postsAll\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/bando/OneDrive/Documents/GitHub/KAAG-v1/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_ALL_POSTS_STATE_CHANGE","firebase","require","fetchUser","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","type","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchAllUserPosts","postsAll"],"mappings":";;;;;;AAAA,SACEA,iBADF,EAEEC,uBAFF,EAGEC,2BAHF;AAKA,OAAOC,QAAP,MAAqB,UAArB;;AACAC,OAAO,CAAC,oBAAD,CAAP;;AAEA,OAAO,SAASC,SAAT,GAAqB;AAC1B,SAAO,UAACC,QAAD,EAAc;AACnBH,IAAAA,QAAQ,CACLI,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGC,GAHH,CAGON,QAAQ,CAACO,IAAT,GAAgBC,WAAhB,CAA4BC,GAHnC,EAIGC,GAJH,GAKGC,IALH,CAKQ,UAACC,QAAD,EAAc;AAClB,UAAIA,QAAQ,CAACC,MAAb,EAAqB;AACnBV,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAEjB,iBAAR;AAA2BW,UAAAA,WAAW,EAAEI,QAAQ,CAACG,IAAT;AAAxC,SAAD,CAAR;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF,KAXH;AAYD,GAbD;AAcD;AAED,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAO,UAACf,QAAD,EAAc;AACnBH,IAAAA,QAAQ,CACLI,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGC,GAHH,CAGON,QAAQ,CAACO,IAAT,GAAgBC,WAAhB,CAA4BC,GAHnC,EAIGJ,UAJH,CAIc,WAJd,EAKGc,OALH,CAKW,UALX,EAKuB,KALvB,EAMGT,GANH,GAOGC,IAPH,CAOQ,UAACC,QAAD,EAAc;AAClB,UAAIQ,KAAK,GAAGR,QAAQ,CAACS,IAAT,CAAcC,GAAd,CAAkB,UAAChB,GAAD,EAAS;AACrC,YAAMS,IAAI,GAAGT,GAAG,CAACS,IAAJ,EAAb;AACA,YAAMQ,EAAE,GAAGjB,GAAG,CAACiB,EAAf;AACA;AAASA,UAAAA,EAAE,EAAFA;AAAT,WAAgBR,IAAhB;AACD,OAJW,CAAZ;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAjB,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAEhB,uBAAR;AAAiCsB,QAAAA,KAAK,EAALA;AAAjC,OAAD,CAAR;AACD,KAfH;AAgBD,GAjBD;AAkBD;AACD,OAAO,SAASI,iBAAT,GAA6B;AAClC,SAAO,UAACrB,QAAD,EAAc;AACnBH,IAAAA,QAAQ,CACLI,SADH,GAEGC,UAFH,CAEc,UAFd,EAGGc,OAHH,CAGW,UAHX,EAGuB,KAHvB,EAIGT,GAJH,GAKGC,IALH,CAKQ,UAACC,QAAD,EAAc;AAClB,UAAIa,QAAQ,GAAGb,QAAQ,CAACS,IAAT,CAAcC,GAAd,CAAkB,UAAChB,GAAD,EAAS;AACxC,YAAMS,IAAI,GAAGT,GAAG,CAACS,IAAJ,EAAb;AACA,YAAMQ,EAAE,GAAGjB,GAAG,CAACiB,EAAf;AACA;AAASA,UAAAA,EAAE,EAAFA;AAAT,WAAgBR,IAAhB;AACD,OAJc,CAAf;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AACAtB,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAEf,2BAAR;AAAqC0B,QAAAA,QAAQ,EAARA;AAArC,OAAD,CAAR;AACD,KAbH;AAcD,GAfD;AAgBD","sourcesContent":["import {\r\n  USER_STATE_CHANGE,\r\n  USER_POSTS_STATE_CHANGE,\r\n  USER_ALL_POSTS_STATE_CHANGE,\r\n} from \"../constants/index\";\r\nimport firebase from \"firebase\";\r\nrequire(\"firebase/firestore\");\r\n\r\nexport function fetchUser() {\r\n  return (dispatch) => {\r\n    firebase\r\n      .firestore()\r\n      .collection(\"users\")\r\n      .doc(firebase.auth().currentUser.uid)\r\n      .get()\r\n      .then((snapshot) => {\r\n        if (snapshot.exists) {\r\n          dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() });\r\n        } else {\r\n          console.log(\"does not exist\");\r\n        }\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchUserPosts() {\r\n  return (dispatch) => {\r\n    firebase\r\n      .firestore()\r\n      .collection(\"posts\")\r\n      .doc(firebase.auth().currentUser.uid)\r\n      .collection(\"userPosts\")\r\n      .orderBy(\"creation\", \"asc\")\r\n      .get()\r\n      .then((snapshot) => {\r\n        let posts = snapshot.docs.map((doc) => {\r\n          const data = doc.data();\r\n          const id = doc.id;\r\n          return { id, ...data };\r\n        });\r\n        console.log(posts);\r\n        dispatch({ type: USER_POSTS_STATE_CHANGE, posts });\r\n      });\r\n  };\r\n}\r\nexport function fetchAllUserPosts() {\r\n  return (dispatch) => {\r\n    firebase\r\n      .firestore()\r\n      .collection(\"postsAll\")\r\n      .orderBy(\"creation\", \"asc\")\r\n      .get()\r\n      .then((snapshot) => {\r\n        let postsAll = snapshot.docs.map((doc) => {\r\n          const data = doc.data();\r\n          const id = doc.id;\r\n          return { id, ...data };\r\n        });\r\n        console.log(postsAll);\r\n        dispatch({ type: USER_ALL_POSTS_STATE_CHANGE, postsAll });\r\n      });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}